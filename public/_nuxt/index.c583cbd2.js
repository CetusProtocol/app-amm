function A(t){return"connect"in t}function S(t){return!A(t)}function T(t){return t.flatMap(c=>S(c)?c.get():c)}var m={async set(t,c){return localStorage.setItem(t,c)},async get(t){return localStorage.getItem(t)},async del(t){localStorage.removeItem(t)}},y="Sui Wallet",h="wallet-kit:last-wallet";function W(t,c){return[...c.map(o=>t.find(u=>u.name===o)).filter(Boolean),...t.filter(o=>!c.includes(o.name))]}function O({adapters:t,preferredWallets:c=[y],storageAdapter:o=m,storageKey:u=h}){const E=new Set;let s=null,e={accounts:[],currentAccount:null,wallets:W(T(t),c),currentWallet:null,status:"DISCONNECTED"};const f=()=>({...e,isConnecting:e.status==="CONNECTING",isConnected:e.status==="CONNECTED",isError:e.status==="ERROR"});let i=f();function l(n){e={...e,...n},i=f(),E.forEach(a=>{try{a(i)}catch{}})}function w(){s&&(s(),s=null),l({status:"DISCONNECTED",accounts:[],currentAccount:null,currentWallet:null})}const N=t.filter(S);N.length&&N.map(n=>n.on("changed",()=>{l({wallets:W(T(t),c)})}));const d={async autoconnect(){if(!i.currentWallet)try{const n=await o.get(u);n&&d.connect(n)}catch{}},getState(){return i},subscribe(n){E.add(n);try{n(i)}catch{}return()=>{E.delete(n)}},async connect(n){var g,C;const a=(g=e.wallets.find(r=>r.name===n))!=null?g:null;if(l({currentWallet:a}),a&&!a.connecting){s&&s(),s=a.on("change",({connected:r})=>{r===!1&&w()});try{l({status:"CONNECTING"}),await a.connect(),l({status:"CONNECTED"});try{await o.set(u,a.name)}catch{}const r=await a.getAccounts();l({accounts:r,currentAccount:(C=r[0])!=null?C:null})}catch(r){console.log("Wallet connection error",r),l({status:"ERROR"})}}else l({status:"DISCONNECTED"})},async disconnect(){if(!e.currentWallet){console.warn("Attempted to `disconnect` but no wallet was connected.");return}try{await o.del(u)}catch{}await e.currentWallet.disconnect(),w()},signTransaction(n){if(!e.currentWallet)throw new Error("No wallet is currently connected, cannot call `signAndExecuteTransaction`.");return e.currentWallet.signTransaction(n)},signAndExecuteTransaction(n,a){if(!e.currentWallet)throw new Error("No wallet is currently connected, cannot call `signAndExecuteTransaction`.");return e.currentWallet.signAndExecuteTransaction(n,a)}};return d}export{O as c};
